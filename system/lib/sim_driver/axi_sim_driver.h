/*
 * Author : Corteggiani Nassim
 * Company: EURECOM
 */

#ifndef INCEPTION_APB_MASTER_H
#define INCEPTION_APB_MASTER_H

#include <iostream>
#include <mutex>
#include <thread>

using namespace std;

// Include common routines
#include "verilated.h"
#include "verilated_vcd_c.h"

// Include model header, generated from Verilating "sha256_top.v"
#include "Vtop.h"

class AXISimulatorDriver : public AbstractSimulator {

public:
  AXISimulatorDriver();

  ~AXISimulatorDriver();

  /*
   * Brief: generate one cycle in the simulator by driving the main clock
   */
  void clock(uint32_t cycles);

  /*
   * Brief: thread-safe function running the simulator until shutdonw gets
   * called
   */
  void run();

  /*
   * Brief: thread-safe function driving top signal to send inputs to the design
   */
  void input(uint32_t data, uint32_t address);

  /*
   * Brief: thread-safe function driving top signal to read outputs from the
   * design
   */
  uint32_t output(uint32_t address);

  /*
   * Brief: this function shutdown the simulator thread safely
   * If trace mode is activated, it flush the file on the disk and closes
   * descriptor
   */
  void shutdown();

  /*
   * Brief: Initialize top signals before running simulation
   * This methods is called by run when using multi-threaded mode
   */
  void init();

private:
  /*
   * This is the Top c++ class generated by Verilator
   * It represents our design with inputs/outputs signals public
   */
  Vtop *top;

#if TRACE
  /*
   * This is a pointer to the trace system
   */
  VerilatedVcdC *tfp;

#endif

  /*
   * This mutex is used to arbitrate access to the simulator as we are in an
   * asynchronous design
   */
  // std::mutex mtx;

  /*
   * While running is true, the run function do not return.
   */
  bool running;
};

#endif
